// Code generated by entc, DO NOT EDIT.

package developper

const (
	// Label holds the string label denoting the developper type in the database.
	Label = "developper"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldSchool holds the string denoting the school field in the database.
	FieldSchool = "school"
	// FieldExperience holds the string denoting the experience field in the database.
	FieldExperience = "experience"

	// EdgeContact holds the string denoting the contact edge name in mutations.
	EdgeContact = "contact"
	// EdgeCompetence holds the string denoting the competence edge name in mutations.
	EdgeCompetence = "competence"

	// Table holds the table name of the developper in the database.
	Table = "developpers"
	// ContactTable is the table the holds the contact relation/edge.
	ContactTable = "contacts"
	// ContactInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ContactInverseTable = "contacts"
	// ContactColumn is the table column denoting the contact relation/edge.
	ContactColumn = "developper_contact"
	// CompetenceTable is the table the holds the competence relation/edge.
	CompetenceTable = "competences"
	// CompetenceInverseTable is the table name for the Competence entity.
	// It exists in this package in order to avoid circular dependency with the "competence" package.
	CompetenceInverseTable = "competences"
	// CompetenceColumn is the table column denoting the competence relation/edge.
	CompetenceColumn = "developper_competence"
)

// Columns holds all SQL columns for developper fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAge,
	FieldSchool,
	FieldExperience,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)
