// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SofwareGoDay3/ent/competence"
	"SofwareGoDay3/ent/contact"
	"SofwareGoDay3/ent/developper"
	"SofwareGoDay3/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DevelopperUpdate is the builder for updating Developper entities.
type DevelopperUpdate struct {
	config
	hooks    []Hook
	mutation *DevelopperMutation
}

// Where adds a new predicate for the DevelopperUpdate builder.
func (du *DevelopperUpdate) Where(ps ...predicate.Developper) *DevelopperUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetName sets the "name" field.
func (du *DevelopperUpdate) SetName(s string) *DevelopperUpdate {
	du.mutation.SetName(s)
	return du
}

// SetAge sets the "age" field.
func (du *DevelopperUpdate) SetAge(i int) *DevelopperUpdate {
	du.mutation.ResetAge()
	du.mutation.SetAge(i)
	return du
}

// AddAge adds i to the "age" field.
func (du *DevelopperUpdate) AddAge(i int) *DevelopperUpdate {
	du.mutation.AddAge(i)
	return du
}

// SetSchool sets the "school" field.
func (du *DevelopperUpdate) SetSchool(s string) *DevelopperUpdate {
	du.mutation.SetSchool(s)
	return du
}

// SetExperience sets the "experience" field.
func (du *DevelopperUpdate) SetExperience(i int) *DevelopperUpdate {
	du.mutation.ResetExperience()
	du.mutation.SetExperience(i)
	return du
}

// AddExperience adds i to the "experience" field.
func (du *DevelopperUpdate) AddExperience(i int) *DevelopperUpdate {
	du.mutation.AddExperience(i)
	return du
}

// SetContactID sets the "contact" edge to the Contact entity by ID.
func (du *DevelopperUpdate) SetContactID(id int) *DevelopperUpdate {
	du.mutation.SetContactID(id)
	return du
}

// SetNillableContactID sets the "contact" edge to the Contact entity by ID if the given value is not nil.
func (du *DevelopperUpdate) SetNillableContactID(id *int) *DevelopperUpdate {
	if id != nil {
		du = du.SetContactID(*id)
	}
	return du
}

// SetContact sets the "contact" edge to the Contact entity.
func (du *DevelopperUpdate) SetContact(c *Contact) *DevelopperUpdate {
	return du.SetContactID(c.ID)
}

// AddCompetenceIDs adds the "competence" edge to the Competence entity by IDs.
func (du *DevelopperUpdate) AddCompetenceIDs(ids ...int) *DevelopperUpdate {
	du.mutation.AddCompetenceIDs(ids...)
	return du
}

// AddCompetence adds the "competence" edges to the Competence entity.
func (du *DevelopperUpdate) AddCompetence(c ...*Competence) *DevelopperUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddCompetenceIDs(ids...)
}

// Mutation returns the DevelopperMutation object of the builder.
func (du *DevelopperUpdate) Mutation() *DevelopperMutation {
	return du.mutation
}

// ClearContact clears the "contact" edge to the Contact entity.
func (du *DevelopperUpdate) ClearContact() *DevelopperUpdate {
	du.mutation.ClearContact()
	return du
}

// ClearCompetence clears all "competence" edges to the Competence entity.
func (du *DevelopperUpdate) ClearCompetence() *DevelopperUpdate {
	du.mutation.ClearCompetence()
	return du
}

// RemoveCompetenceIDs removes the "competence" edge to Competence entities by IDs.
func (du *DevelopperUpdate) RemoveCompetenceIDs(ids ...int) *DevelopperUpdate {
	du.mutation.RemoveCompetenceIDs(ids...)
	return du
}

// RemoveCompetence removes "competence" edges to Competence entities.
func (du *DevelopperUpdate) RemoveCompetence(c ...*Competence) *DevelopperUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveCompetenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DevelopperUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevelopperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DevelopperUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DevelopperUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DevelopperUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DevelopperUpdate) check() error {
	if v, ok := du.mutation.Age(); ok {
		if err := developper.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (du *DevelopperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   developper.Table,
			Columns: developper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: developper.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldName,
		})
	}
	if value, ok := du.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldAge,
		})
	}
	if value, ok := du.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldAge,
		})
	}
	if value, ok := du.mutation.School(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldSchool,
		})
	}
	if value, ok := du.mutation.Experience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldExperience,
		})
	}
	if value, ok := du.mutation.AddedExperience(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldExperience,
		})
	}
	if du.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   developper.ContactTable,
			Columns: []string{developper.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   developper.ContactTable,
			Columns: []string{developper.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CompetenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedCompetenceIDs(); len(nodes) > 0 && !du.mutation.CompetenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CompetenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{developper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DevelopperUpdateOne is the builder for updating a single Developper entity.
type DevelopperUpdateOne struct {
	config
	hooks    []Hook
	mutation *DevelopperMutation
}

// SetName sets the "name" field.
func (duo *DevelopperUpdateOne) SetName(s string) *DevelopperUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetAge sets the "age" field.
func (duo *DevelopperUpdateOne) SetAge(i int) *DevelopperUpdateOne {
	duo.mutation.ResetAge()
	duo.mutation.SetAge(i)
	return duo
}

// AddAge adds i to the "age" field.
func (duo *DevelopperUpdateOne) AddAge(i int) *DevelopperUpdateOne {
	duo.mutation.AddAge(i)
	return duo
}

// SetSchool sets the "school" field.
func (duo *DevelopperUpdateOne) SetSchool(s string) *DevelopperUpdateOne {
	duo.mutation.SetSchool(s)
	return duo
}

// SetExperience sets the "experience" field.
func (duo *DevelopperUpdateOne) SetExperience(i int) *DevelopperUpdateOne {
	duo.mutation.ResetExperience()
	duo.mutation.SetExperience(i)
	return duo
}

// AddExperience adds i to the "experience" field.
func (duo *DevelopperUpdateOne) AddExperience(i int) *DevelopperUpdateOne {
	duo.mutation.AddExperience(i)
	return duo
}

// SetContactID sets the "contact" edge to the Contact entity by ID.
func (duo *DevelopperUpdateOne) SetContactID(id int) *DevelopperUpdateOne {
	duo.mutation.SetContactID(id)
	return duo
}

// SetNillableContactID sets the "contact" edge to the Contact entity by ID if the given value is not nil.
func (duo *DevelopperUpdateOne) SetNillableContactID(id *int) *DevelopperUpdateOne {
	if id != nil {
		duo = duo.SetContactID(*id)
	}
	return duo
}

// SetContact sets the "contact" edge to the Contact entity.
func (duo *DevelopperUpdateOne) SetContact(c *Contact) *DevelopperUpdateOne {
	return duo.SetContactID(c.ID)
}

// AddCompetenceIDs adds the "competence" edge to the Competence entity by IDs.
func (duo *DevelopperUpdateOne) AddCompetenceIDs(ids ...int) *DevelopperUpdateOne {
	duo.mutation.AddCompetenceIDs(ids...)
	return duo
}

// AddCompetence adds the "competence" edges to the Competence entity.
func (duo *DevelopperUpdateOne) AddCompetence(c ...*Competence) *DevelopperUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddCompetenceIDs(ids...)
}

// Mutation returns the DevelopperMutation object of the builder.
func (duo *DevelopperUpdateOne) Mutation() *DevelopperMutation {
	return duo.mutation
}

// ClearContact clears the "contact" edge to the Contact entity.
func (duo *DevelopperUpdateOne) ClearContact() *DevelopperUpdateOne {
	duo.mutation.ClearContact()
	return duo
}

// ClearCompetence clears all "competence" edges to the Competence entity.
func (duo *DevelopperUpdateOne) ClearCompetence() *DevelopperUpdateOne {
	duo.mutation.ClearCompetence()
	return duo
}

// RemoveCompetenceIDs removes the "competence" edge to Competence entities by IDs.
func (duo *DevelopperUpdateOne) RemoveCompetenceIDs(ids ...int) *DevelopperUpdateOne {
	duo.mutation.RemoveCompetenceIDs(ids...)
	return duo
}

// RemoveCompetence removes "competence" edges to Competence entities.
func (duo *DevelopperUpdateOne) RemoveCompetence(c ...*Competence) *DevelopperUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveCompetenceIDs(ids...)
}

// Save executes the query and returns the updated Developper entity.
func (duo *DevelopperUpdateOne) Save(ctx context.Context) (*Developper, error) {
	var (
		err  error
		node *Developper
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevelopperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DevelopperUpdateOne) SaveX(ctx context.Context) *Developper {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DevelopperUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DevelopperUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DevelopperUpdateOne) check() error {
	if v, ok := duo.mutation.Age(); ok {
		if err := developper.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (duo *DevelopperUpdateOne) sqlSave(ctx context.Context) (_node *Developper, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   developper.Table,
			Columns: developper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: developper.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Developper.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldName,
		})
	}
	if value, ok := duo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldAge,
		})
	}
	if value, ok := duo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldAge,
		})
	}
	if value, ok := duo.mutation.School(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldSchool,
		})
	}
	if value, ok := duo.mutation.Experience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldExperience,
		})
	}
	if value, ok := duo.mutation.AddedExperience(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldExperience,
		})
	}
	if duo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   developper.ContactTable,
			Columns: []string{developper.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   developper.ContactTable,
			Columns: []string{developper.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CompetenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedCompetenceIDs(); len(nodes) > 0 && !duo.mutation.CompetenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CompetenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   developper.CompetenceTable,
			Columns: []string{developper.CompetenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competence.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Developper{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{developper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
