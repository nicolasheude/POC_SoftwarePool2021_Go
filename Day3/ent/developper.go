// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SofwareGoDay3/ent/contact"
	"SofwareGoDay3/ent/developper"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Developper is the model entity for the Developper schema.
type Developper struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// School holds the value of the "school" field.
	School string `json:"school,omitempty"`
	// Experience holds the value of the "experience" field.
	Experience int `json:"experience,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DevelopperQuery when eager-loading is set.
	Edges DevelopperEdges `json:"edges"`
}

// DevelopperEdges holds the relations/edges for other nodes in the graph.
type DevelopperEdges struct {
	// Contact holds the value of the contact edge.
	Contact *Contact `json:"contact,omitempty"`
	// Competence holds the value of the competence edge.
	Competence []*Competence `json:"competence,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContactOrErr returns the Contact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DevelopperEdges) ContactOrErr() (*Contact, error) {
	if e.loadedTypes[0] {
		if e.Contact == nil {
			// The edge contact was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contact.Label}
		}
		return e.Contact, nil
	}
	return nil, &NotLoadedError{edge: "contact"}
}

// CompetenceOrErr returns the Competence value or an error if the edge
// was not loaded in eager-loading.
func (e DevelopperEdges) CompetenceOrErr() ([]*Competence, error) {
	if e.loadedTypes[1] {
		return e.Competence, nil
	}
	return nil, &NotLoadedError{edge: "competence"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Developper) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case developper.FieldID, developper.FieldAge, developper.FieldExperience:
			values[i] = &sql.NullInt64{}
		case developper.FieldName, developper.FieldSchool:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Developper", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Developper fields.
func (d *Developper) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case developper.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case developper.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case developper.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				d.Age = int(value.Int64)
			}
		case developper.FieldSchool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school", values[i])
			} else if value.Valid {
				d.School = value.String
			}
		case developper.FieldExperience:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field experience", values[i])
			} else if value.Valid {
				d.Experience = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryContact queries the "contact" edge of the Developper entity.
func (d *Developper) QueryContact() *ContactQuery {
	return (&DevelopperClient{config: d.config}).QueryContact(d)
}

// QueryCompetence queries the "competence" edge of the Developper entity.
func (d *Developper) QueryCompetence() *CompetenceQuery {
	return (&DevelopperClient{config: d.config}).QueryCompetence(d)
}

// Update returns a builder for updating this Developper.
// Note that you need to call Developper.Unwrap() before calling this method if this Developper
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Developper) Update() *DevelopperUpdateOne {
	return (&DevelopperClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Developper entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Developper) Unwrap() *Developper {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Developper is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Developper) String() string {
	var builder strings.Builder
	builder.WriteString("Developper(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteString(", school=")
	builder.WriteString(d.School)
	builder.WriteString(", experience=")
	builder.WriteString(fmt.Sprintf("%v", d.Experience))
	builder.WriteByte(')')
	return builder.String()
}

// Developpers is a parsable slice of Developper.
type Developpers []*Developper

func (d Developpers) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
