// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SofwareGoDay3/ent/competence"
	"SofwareGoDay3/ent/developper"
	"SofwareGoDay3/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompetenceUpdate is the builder for updating Competence entities.
type CompetenceUpdate struct {
	config
	hooks    []Hook
	mutation *CompetenceMutation
}

// Where adds a new predicate for the CompetenceUpdate builder.
func (cu *CompetenceUpdate) Where(ps ...predicate.Competence) *CompetenceUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompetenceUpdate) SetName(s string) *CompetenceUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetLevel sets the "level" field.
func (cu *CompetenceUpdate) SetLevel(i int) *CompetenceUpdate {
	cu.mutation.ResetLevel()
	cu.mutation.SetLevel(i)
	return cu
}

// AddLevel adds i to the "level" field.
func (cu *CompetenceUpdate) AddLevel(i int) *CompetenceUpdate {
	cu.mutation.AddLevel(i)
	return cu
}

// SetOwnerID sets the "owner" edge to the Developper entity by ID.
func (cu *CompetenceUpdate) SetOwnerID(id int) *CompetenceUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetOwner sets the "owner" edge to the Developper entity.
func (cu *CompetenceUpdate) SetOwner(d *Developper) *CompetenceUpdate {
	return cu.SetOwnerID(d.ID)
}

// Mutation returns the CompetenceMutation object of the builder.
func (cu *CompetenceUpdate) Mutation() *CompetenceMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Developper entity.
func (cu *CompetenceUpdate) ClearOwner() *CompetenceUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetenceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompetenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetenceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetenceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetenceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompetenceUpdate) check() error {
	if v, ok := cu.mutation.Level(); ok {
		if err := competence.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := cu.mutation.OwnerID(); cu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (cu *CompetenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   competence.Table,
			Columns: competence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: competence.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competence.FieldName,
		})
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: competence.FieldLevel,
		})
	}
	if value, ok := cu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: competence.FieldLevel,
		})
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competence.OwnerTable,
			Columns: []string{competence.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: developper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competence.OwnerTable,
			Columns: []string{competence.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: developper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competence.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CompetenceUpdateOne is the builder for updating a single Competence entity.
type CompetenceUpdateOne struct {
	config
	hooks    []Hook
	mutation *CompetenceMutation
}

// SetName sets the "name" field.
func (cuo *CompetenceUpdateOne) SetName(s string) *CompetenceUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetLevel sets the "level" field.
func (cuo *CompetenceUpdateOne) SetLevel(i int) *CompetenceUpdateOne {
	cuo.mutation.ResetLevel()
	cuo.mutation.SetLevel(i)
	return cuo
}

// AddLevel adds i to the "level" field.
func (cuo *CompetenceUpdateOne) AddLevel(i int) *CompetenceUpdateOne {
	cuo.mutation.AddLevel(i)
	return cuo
}

// SetOwnerID sets the "owner" edge to the Developper entity by ID.
func (cuo *CompetenceUpdateOne) SetOwnerID(id int) *CompetenceUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetOwner sets the "owner" edge to the Developper entity.
func (cuo *CompetenceUpdateOne) SetOwner(d *Developper) *CompetenceUpdateOne {
	return cuo.SetOwnerID(d.ID)
}

// Mutation returns the CompetenceMutation object of the builder.
func (cuo *CompetenceUpdateOne) Mutation() *CompetenceMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Developper entity.
func (cuo *CompetenceUpdateOne) ClearOwner() *CompetenceUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Save executes the query and returns the updated Competence entity.
func (cuo *CompetenceUpdateOne) Save(ctx context.Context) (*Competence, error) {
	var (
		err  error
		node *Competence
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompetenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetenceUpdateOne) SaveX(ctx context.Context) *Competence {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetenceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetenceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompetenceUpdateOne) check() error {
	if v, ok := cuo.mutation.Level(); ok {
		if err := competence.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := cuo.mutation.OwnerID(); cuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (cuo *CompetenceUpdateOne) sqlSave(ctx context.Context) (_node *Competence, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   competence.Table,
			Columns: competence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: competence.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Competence.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: competence.FieldName,
		})
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: competence.FieldLevel,
		})
	}
	if value, ok := cuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: competence.FieldLevel,
		})
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competence.OwnerTable,
			Columns: []string{competence.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: developper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   competence.OwnerTable,
			Columns: []string{competence.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: developper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Competence{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competence.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
