// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SofwareGoDay3/ent/competence"
	"SofwareGoDay3/ent/developper"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Competence is the model entity for the Competence schema.
type Competence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompetenceQuery when eager-loading is set.
	Edges                 CompetenceEdges `json:"edges"`
	developper_competence *int
}

// CompetenceEdges holds the relations/edges for other nodes in the graph.
type CompetenceEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Developper `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompetenceEdges) OwnerOrErr() (*Developper, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: developper.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Competence) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case competence.FieldID, competence.FieldLevel:
			values[i] = &sql.NullInt64{}
		case competence.FieldName:
			values[i] = &sql.NullString{}
		case competence.ForeignKeys[0]: // developper_competence
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Competence", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Competence fields.
func (c *Competence) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case competence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case competence.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case competence.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				c.Level = int(value.Int64)
			}
		case competence.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field developper_competence", value)
			} else if value.Valid {
				c.developper_competence = new(int)
				*c.developper_competence = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Competence entity.
func (c *Competence) QueryOwner() *DevelopperQuery {
	return (&CompetenceClient{config: c.config}).QueryOwner(c)
}

// Update returns a builder for updating this Competence.
// Note that you need to call Competence.Unwrap() before calling this method if this Competence
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Competence) Update() *CompetenceUpdateOne {
	return (&CompetenceClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Competence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Competence) Unwrap() *Competence {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Competence is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Competence) String() string {
	var builder strings.Builder
	builder.WriteString("Competence(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", c.Level))
	builder.WriteByte(')')
	return builder.String()
}

// Competences is a parsable slice of Competence.
type Competences []*Competence

func (c Competences) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
