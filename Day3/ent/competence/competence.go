// Code generated by entc, DO NOT EDIT.

package competence

const (
	// Label holds the string label denoting the competence type in the database.
	Label = "competence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"

	// Table holds the table name of the competence in the database.
	Table = "competences"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "competences"
	// OwnerInverseTable is the table name for the Developper entity.
	// It exists in this package in order to avoid circular dependency with the "developper" package.
	OwnerInverseTable = "developpers"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "developper_competence"
)

// Columns holds all SQL columns for competence fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Competence type.
var ForeignKeys = []string{
	"developper_competence",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LevelValidator is a validator for the "level" field. It is called by the builders before save.
	LevelValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)
