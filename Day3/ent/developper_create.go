// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SofwareGoDay3/ent/contact"
	"SofwareGoDay3/ent/developper"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DevelopperCreate is the builder for creating a Developper entity.
type DevelopperCreate struct {
	config
	mutation *DevelopperMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DevelopperCreate) SetName(s string) *DevelopperCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetAge sets the "age" field.
func (dc *DevelopperCreate) SetAge(i int) *DevelopperCreate {
	dc.mutation.SetAge(i)
	return dc
}

// SetSchool sets the "school" field.
func (dc *DevelopperCreate) SetSchool(s string) *DevelopperCreate {
	dc.mutation.SetSchool(s)
	return dc
}

// SetExperience sets the "experience" field.
func (dc *DevelopperCreate) SetExperience(i int) *DevelopperCreate {
	dc.mutation.SetExperience(i)
	return dc
}

// SetID sets the "id" field.
func (dc *DevelopperCreate) SetID(i int) *DevelopperCreate {
	dc.mutation.SetID(i)
	return dc
}

// SetContactID sets the "contact" edge to the Contact entity by ID.
func (dc *DevelopperCreate) SetContactID(id int) *DevelopperCreate {
	dc.mutation.SetContactID(id)
	return dc
}

// SetNillableContactID sets the "contact" edge to the Contact entity by ID if the given value is not nil.
func (dc *DevelopperCreate) SetNillableContactID(id *int) *DevelopperCreate {
	if id != nil {
		dc = dc.SetContactID(*id)
	}
	return dc
}

// SetContact sets the "contact" edge to the Contact entity.
func (dc *DevelopperCreate) SetContact(c *Contact) *DevelopperCreate {
	return dc.SetContactID(c.ID)
}

// Mutation returns the DevelopperMutation object of the builder.
func (dc *DevelopperCreate) Mutation() *DevelopperMutation {
	return dc.mutation
}

// Save creates the Developper in the database.
func (dc *DevelopperCreate) Save(ctx context.Context) (*Developper, error) {
	var (
		err  error
		node *Developper
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevelopperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DevelopperCreate) SaveX(ctx context.Context) *Developper {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DevelopperCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := dc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := dc.mutation.Age(); ok {
		if err := developper.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := dc.mutation.School(); !ok {
		return &ValidationError{Name: "school", err: errors.New("ent: missing required field \"school\"")}
	}
	if _, ok := dc.mutation.Experience(); !ok {
		return &ValidationError{Name: "experience", err: errors.New("ent: missing required field \"experience\"")}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := developper.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (dc *DevelopperCreate) sqlSave(ctx context.Context) (*Developper, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (dc *DevelopperCreate) createSpec() (*Developper, *sqlgraph.CreateSpec) {
	var (
		_node = &Developper{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: developper.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: developper.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := dc.mutation.School(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: developper.FieldSchool,
		})
		_node.School = value
	}
	if value, ok := dc.mutation.Experience(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: developper.FieldExperience,
		})
		_node.Experience = value
	}
	if nodes := dc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   developper.ContactTable,
			Columns: []string{developper.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DevelopperCreateBulk is the builder for creating many Developper entities in bulk.
type DevelopperCreateBulk struct {
	config
	builders []*DevelopperCreate
}

// Save creates the Developper entities in the database.
func (dcb *DevelopperCreateBulk) Save(ctx context.Context) ([]*Developper, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Developper, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DevelopperMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DevelopperCreateBulk) SaveX(ctx context.Context) []*Developper {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
